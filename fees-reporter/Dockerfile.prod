###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:18-alpine As development

# Create app directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

# Install app dependencies using the `npm ci` command instead of `npm install`
#RUN npm install --package-lock-only true
RUN npm ci

# Bundle app source
COPY --chown=node:node . .

# Use the node user from the image (instead of the root user)
#USER node

###################
# BUILD FOR PRODUCTION
###################

FROM node:18-alpine As build

# Utility tool to avoid the node process to be PID=1
RUN apk update && apk add dumb-init

WORKDIR /usr/src/app

COPY --chown=node:node package*.json ./

# In order to run `npm run build` we need access to the Nest CLI which is a dev dependency. In the previous development stage we ran `npm ci` which installed all dependencies, so we can copy over the node_modules directory from the development image
COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

COPY --chown=node:node . .

# Set NODE_ENV environment variable
ENV NODE_ENV production

# creates the production bundle using Webpack (optimized)
RUN npm run webpack:build

# Initial `npm pkg delete scripts.prepare` fixes the need for dev tools dependency such as husky
RUN npm pkg delete scripts.prepare

# Running `npm ci` removes the existing node_modules directory and 
# passing in --omit=dev ensures that only the production dependencies are installed. 
# This ensures that the node_modules directory is as optimized as possible
RUN npm ci --omit=dev --only=production

RUN npm cache clean --force

###################
# PRODUCTION
###################

FROM node:18-alpine As production

# /!\ Ensure the OS is up-to-date with latest packages / vulnerability fixes
RUN apk -U upgrade && apk cache clean

#FROM gcr.io/distroless/nodejs20-debian11 As production

# Import previously installed 'dumb-init' script
COPY --from=build /usr/bin/dumb-init /usr/bin/dumb-init

# Set NODE_ENV environment variable
ENV NODE_ENV production

WORKDIR /usr/src/app

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# Resources specific to this project, for runnning a static web server
COPY --chown=node:node --from=build /usr/src/app/static ./static

# Create the logs dir (app specific), made accessible to the user 'node'
RUN mkdir -p logs && chown node:node logs

# Ensure the Node process will run under the user 'node'
USER node

# Optional specification of the port to expose
EXPOSE 3000

# Start the server using the production build
CMD [ "dumb-init", "node", "dist/server.js" ]
